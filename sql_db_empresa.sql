-- MySQL Script generated by MySQL Workbench
-- Sun Apr  6 20:04:50 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_empresa
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `db_empresa` ;

-- -----------------------------------------------------
-- Schema db_empresa
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_empresa` DEFAULT CHARACTER SET utf8 ;
USE `db_empresa` ;

-- -----------------------------------------------------
-- Table `db_empresa`.`area_trabajo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`area_trabajo` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`area_trabajo` (
  `id_area_trabajo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_area_trabajo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`colaborador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`colaborador` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`colaborador` (
  `id_colaborador` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `documento` VARCHAR(20) NOT NULL,
  `correo` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(20) NOT NULL,
  `fecha_nacimiento` DATE NOT NULL,
  `salario` DECIMAL(10,2) NOT NULL,
  `area_trabajo_id_area_trabajo` INT NOT NULL,
  PRIMARY KEY (`id_colaborador`),
  INDEX `fk_colaborador_area_trabajo1_idx` (`area_trabajo_id_area_trabajo` ASC) VISIBLE,
  INDEX `correo_UNIQUE` (`correo` ASC) VISIBLE,
  UNIQUE INDEX `documento_UNIQUE` (`documento` ASC) VISIBLE,
  CONSTRAINT `fk_colaborador_area_trabajo1`
    FOREIGN KEY (`area_trabajo_id_area_trabajo`)
    REFERENCES `db_empresa`.`area_trabajo` (`id_area_trabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`historial_salarial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`historial_salarial` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`historial_salarial` (
  `id_historial_salarial` INT NOT NULL AUTO_INCREMENT,
  `salario_anterior` DECIMAL(10,2) NOT NULL,
  `salario_nuevo` DECIMAL(10,2) NOT NULL,
  `fecha_modificacion` DATE NOT NULL,
  `colaborador_id_colaborador` INT NOT NULL,
  PRIMARY KEY (`id_historial_salarial`),
  INDEX `fk_historial_salarial_colaborador1_idx` (`colaborador_id_colaborador` ASC) VISIBLE,
  CONSTRAINT `fk_historial_salarial_colaborador1`
    FOREIGN KEY (`colaborador_id_colaborador`)
    REFERENCES `db_empresa`.`colaborador` (`id_colaborador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`cliente` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`cliente` (
  `id_cliente` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `correo` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id_cliente`),
  INDEX `correo_idx` (`correo` ASC) VISIBLE,
  INDEX `telefono_idx` (`telefono` ASC) VISIBLE,
  UNIQUE INDEX `correo_UNIQUE` (`correo` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`venta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`venta` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`venta` (
  `id_venta` INT NOT NULL AUTO_INCREMENT,
  `fecha_venta` DATE NOT NULL,
  `total_venta` DECIMAL(10,2) NULL DEFAULT 0.00,
  `colaborador_id_colaborador` INT NOT NULL,
  `cliente_id_cliente` INT NOT NULL,
  PRIMARY KEY (`id_venta`),
  INDEX `fecha_venta_idx` (`fecha_venta` ASC) VISIBLE,
  INDEX `fk_venta_colaborador1_idx` (`colaborador_id_colaborador` ASC) VISIBLE,
  INDEX `fk_venta_cliente1_idx` (`cliente_id_cliente` ASC) VISIBLE,
  CONSTRAINT `fk_venta_colaborador1`
    FOREIGN KEY (`colaborador_id_colaborador`)
    REFERENCES `db_empresa`.`colaborador` (`id_colaborador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_venta_cliente1`
    FOREIGN KEY (`cliente_id_cliente`)
    REFERENCES `db_empresa`.`cliente` (`id_cliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`producto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`producto` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`producto` (
  `id_producto` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `precio` DECIMAL(10,2) NOT NULL,
  `stock` INT NOT NULL,
  PRIMARY KEY (`id_producto`),
  INDEX `nombre_producto_idx` (`nombre` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`detalle_venta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`detalle_venta` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`detalle_venta` (
  `id_detalle_venta` INT NOT NULL AUTO_INCREMENT,
  `cantidad` INT NOT NULL,
  `sub_total` DECIMAL(10,2) NOT NULL,
  `venta_id_venta` INT NOT NULL,
  `producto_id_producto` INT NOT NULL,
  PRIMARY KEY (`id_detalle_venta`),
  INDEX `fk_detalle_venta_venta1_idx` (`venta_id_venta` ASC) VISIBLE,
  INDEX `fk_detalle_venta_producto1_idx` (`producto_id_producto` ASC) VISIBLE,
  CONSTRAINT `fk_detalle_venta_venta1`
    FOREIGN KEY (`venta_id_venta`)
    REFERENCES `db_empresa`.`venta` (`id_venta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_detalle_venta_producto1`
    FOREIGN KEY (`producto_id_producto`)
    REFERENCES `db_empresa`.`producto` (`id_producto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`metodo_pago`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`metodo_pago` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`metodo_pago` (
  `id_metodo_pago` INT NOT NULL AUTO_INCREMENT,
  `metodo` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_metodo_pago`),
  UNIQUE INDEX `metodo_UNIQUE` (`metodo` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_empresa`.`pago`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_empresa`.`pago` ;

CREATE TABLE IF NOT EXISTS `db_empresa`.`pago` (
  `id_pago` INT NOT NULL AUTO_INCREMENT,
  `referencia_convenio` VARCHAR(50) NOT NULL,
  `numero_tarjeta` VARCHAR(19) NULL,
  `venta_id_venta` INT NOT NULL,
  `metodo_pago_id_metodo_pago` INT NOT NULL,
  PRIMARY KEY (`id_pago`),
  INDEX `fk_pago_venta1_idx` (`venta_id_venta` ASC) VISIBLE,
  INDEX `fk_pago_metodo_pago1_idx` (`metodo_pago_id_metodo_pago` ASC) VISIBLE,
  CONSTRAINT `fk_pago_venta1`
    FOREIGN KEY (`venta_id_venta`)
    REFERENCES `db_empresa`.`venta` (`id_venta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pago_metodo_pago1`
    FOREIGN KEY (`metodo_pago_id_metodo_pago`)
    REFERENCES `db_empresa`.`metodo_pago` (`id_metodo_pago`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `db_empresa`;

DELIMITER $$

USE `db_empresa`$$
DROP TRIGGER IF EXISTS `db_empresa`.`venta_BEFORE_INSERT` $$
USE `db_empresa`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_empresa`.`venta_BEFORE_INSERT`
BEFORE INSERT ON `venta`
FOR EACH ROW
BEGIN
  DECLARE area_colaborador INT;

  -- Área de trabajo del colaborador que se está insertando
  SELECT area_trabajo_id_area_trabajo
  INTO area_colaborador
  FROM colaborador
  WHERE id_colaborador = NEW.colaborador_id_colaborador;

  -- Verificar si el área es distinta de 3 (ventas)
  IF area_colaborador != 3 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Solo se permiten colaboradores del área de ventas (área 3)';
  END IF;
END$$


USE `db_empresa`$$
DROP TRIGGER IF EXISTS `db_empresa`.`detalle_venta_BEFORE_INSERT_CAL_SUBTOTAL` $$
USE `db_empresa`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `db_empresa`.`detalle_venta_BEFORE_INSERT_CAL_SUBTOTAL`
BEFORE INSERT ON `detalle_venta`
FOR EACH ROW
BEGIN
  -- Calcular el sub_total automáticamente antes de insertar
  SET NEW.sub_total = NEW.cantidad * (
    SELECT precio 
    FROM producto 
    WHERE id_producto = NEW.producto_id_producto
  );
END;$$


USE `db_empresa`$$
DROP TRIGGER IF EXISTS `db_empresa`.`detalle_venta_BEFORE_INSERT_STOCK` $$
USE `db_empresa`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `db_empresa`.`detalle_venta_BEFORE_INSERT_STOCK`
BEFORE INSERT ON `detalle_venta`
FOR EACH ROW
BEGIN
  DECLARE stock_actual INT;

  -- Obtener el stock actual del producto
  SELECT stock INTO stock_actual
  FROM producto
  WHERE id_producto = NEW.producto_id_producto;

  -- Validar si hay suficiente stock
  IF NEW.cantidad > stock_actual THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Stock insuficiente para el producto seleccionado';
  END IF;

  -- Calcular el sub_total automáticamente
  SET NEW.sub_total = NEW.cantidad * (
    SELECT precio 
    FROM producto 
    WHERE id_producto = NEW.producto_id_producto
  );
END;$$


USE `db_empresa`$$
DROP TRIGGER IF EXISTS `db_empresa`.`detalle_venta_AFTER_INSERT_VENTA_TOTAL` $$
USE `db_empresa`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `db_empresa`.`detalle_venta_AFTER_INSERT_VENTA_TOTAL`
AFTER INSERT ON `detalle_venta`
FOR EACH ROW
BEGIN
  -- Declarar variable para guardar el nuevo total
  DECLARE nuevo_total DECIMAL(10,2);

  -- Calcular la suma de los sub_totales de los detalles de la venta asociada
  SELECT SUM(sub_total)
  INTO nuevo_total
  FROM detalle_venta
  WHERE venta_id_venta = NEW.venta_id_venta;

  -- Actualizar el total_venta en la tabla venta
  UPDATE venta
  SET total_venta = nuevo_total
  WHERE id_venta = NEW.venta_id_venta;
END$$


USE `db_empresa`$$
DROP TRIGGER IF EXISTS `db_empresa`.`detalle_venta_AFTER_INSERT_UPDATE_STOCK` $$
USE `db_empresa`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `db_empresa`.`detalle_venta_AFTER_INSERT_UPDATE_STOCK`
AFTER INSERT ON `detalle_venta`
FOR EACH ROW
BEGIN
  -- Actualizar el stock del producto restando la cantidad vendida
  UPDATE producto
  SET stock = stock - NEW.cantidad
  WHERE id_producto = NEW.producto_id_producto;
END;$$


USE `db_empresa`$$
DROP TRIGGER IF EXISTS `db_empresa`.`detalle_venta_AFTER_INSERT_actualizar_total_venta` $$
USE `db_empresa`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `db_empresa`.`detalle_venta_AFTER_INSERT_actualizar_total_venta` AFTER INSERT ON `detalle_venta` FOR EACH ROW
BEGIN
  UPDATE venta
  SET total_venta = (
    SELECT SUM(sub_total)
    FROM detalle_venta
    WHERE venta_id_venta = NEW.venta_id_venta
  )
  WHERE id_venta = NEW.venta_id_venta;
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
